{"version":3,"sources":["components/input-field/index.js","components/repo-list-card/index.js","components/repo-list/index.js","apiServices.js","pages/main.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","value","onInputChange","onClickHandler","className","placeholder","onChange","onClick","defaultProps","RepoListCard","userName","userAvatar","userRepos","hasNoRepo","length","repoContainerClass","src","alt","map","index","description","repoName","repoUrl","href","memo","RepoList","userInfo","login","avatarUrl","repos","getSearchResult","searchTerm","axios","get","params","q","getUserRepos","MainContainer","cache","state","inputValue","isLoading","hasError","updateCache","key","res","e","setState","target","keyword","lowerCaseKey","toLowerCase","hasOwnProperty","then","data","items","Promise","all","user","avatar_url","full_name","html_url","split","catch","this","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d41718f.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\nimport { string, func } from 'prop-types'\r\n\r\nconst InputField = ({\r\n  value,\r\n  onInputChange,\r\n  onClickHandler,\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <input\r\n        className=\"search-input\"\r\n        value={value}\r\n        placeholder=\"Type user name...\"\r\n        onChange={onInputChange}\r\n      />\r\n      <button\r\n        className=\"search-button\"\r\n        onClick={onClickHandler}\r\n      >\r\n        Search\r\n      </button>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nInputField.propTypes = {\r\n  value: string,\r\n  onInputChange: func.isRequired,\r\n  onClickHandler: func.isRequired,\r\n}\r\n\r\nInputField.defaultProps = {\r\n  value: '',\r\n}\r\n\r\nexport default InputField\r\n","import React, { memo } from 'react'\r\nimport { arrayOf, shape, string } from 'prop-types'\r\n\r\nconst RepoListCard = ({\r\n  userName,\r\n  userAvatar,\r\n  userRepos,\r\n}) => {\r\n  const hasNoRepo = !userRepos.length\r\n  const repoContainerClass = `repo-container${hasNoRepo ? '--no-repo' : ''}` \r\n\r\n  return (\r\n    <div className=\"user-card\">\r\n      <img className=\"user-avatar\" src={userAvatar} alt={userName} />\r\n      <p className=\"user-name\">{userName}</p>\r\n      <div className={repoContainerClass}>\r\n        { hasNoRepo && <p className=\"no-repo-text\">This user has no repository yet...</p> }\r\n        { userRepos.map(({ description, repoName, repoUrl }, index) => (\r\n          <div className=\"repo-card\" key={index}>\r\n            <a className=\"repo-name\" href={repoUrl}>{repoName}</a>\r\n            <p className=\"repo-desc\">{description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <hr className=\"separator\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nRepoListCard.propTypes = {\r\n  userName: string,\r\n  userAvatar: string,\r\n  userRepos: arrayOf(\r\n    shape({\r\n      description: string,\r\n      repoName: string,\r\n      repoUrl: string,\r\n    })\r\n  ),\r\n}\r\n\r\nRepoListCard.defaultProps = {\r\n  userName: '',\r\n  userAvatar: '',\r\n  userRepos: [],\r\n}\r\n\r\nexport default memo(RepoListCard)\r\n","import React, { memo } from 'react'\r\nimport RepoListCard from '../repo-list-card'\r\nimport { arrayOf, shape, array, string } from 'prop-types'\r\n\r\nconst RepoList = ({\r\n  userInfo,\r\n}) => {\r\n  if (!userInfo.length) return null\r\n\r\n  return (\r\n    <div className=\"repo-list\">\r\n      { userInfo.map(({ login, avatarUrl, repos }, index) => (\r\n        <RepoListCard\r\n          key={index}\r\n          userName={login}\r\n          userAvatar={avatarUrl}\r\n          userRepos={repos}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nRepoList.propTypes = {\r\n  userInfo: arrayOf(\r\n    shape({\r\n      login: string,\r\n      avatarUrl: string,\r\n      repos: array,\r\n    })\r\n  ).isRequired,\r\n}\r\n\r\nexport default memo(RepoList)\r\n","import axios from \"axios\"\r\n\r\nconst getSearchResult = (searchTerm) => {\r\n  return axios.get(`https://api.github.com/search/users`, {\r\n    params: {\r\n      q: searchTerm\r\n    }/*,\r\n    auth: {\r\n      username: 'beeefarmer',\r\n      password: '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',\r\n    },*/\r\n  })\r\n}\r\n\r\nconst getUserRepos = (userName) => {\r\n  return axios.get(`https://api.github.com/users/${userName}/repos`/*, {\r\n    auth: {\r\n      username: 'beeefarmer',\r\n      password: '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',\r\n    }\r\n  }*/)\r\n}\r\n\r\nexport {\r\n  getSearchResult,\r\n  getUserRepos,\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { InputField, RepoList } from '../components'\r\nimport { getSearchResult, getUserRepos } from '../apiServices'\r\n\r\nclass MainContainer extends Component {\r\n  cache = {}\r\n  state = {\r\n    inputValue: '',\r\n    userInfo: [],\r\n    isLoading: false,\r\n    hasError: false,\r\n  }\r\n\r\n  updateCache = (key, res) => {\r\n    this.cache[key] = res\r\n  }\r\n\r\n  onInputChange = (e) => {\r\n    this.setState({ inputValue: e.target.value})\r\n  }\r\n\r\n  onClickHandler = () => {\r\n    const { inputValue: keyword } = this.state\r\n    const lowerCaseKey = keyword.toLowerCase()\r\n\r\n    // check whether the current search term is in cache\r\n    if (this.cache.hasOwnProperty(lowerCaseKey)) {\r\n      this.setState({\r\n        userInfo: this.cache[lowerCaseKey],\r\n        hasError: false,\r\n      })\r\n      return\r\n    }\r\n\r\n    this.setState({ isLoading: true, hasError: false })\r\n    getSearchResult(keyword)\r\n      .then(({ data }) => {\r\n        const { items = [] } = data\r\n        return Promise.all(\r\n          items.map((user) => {\r\n            const { login, avatar_url } = user\r\n            return getUserRepos(login).then(({ data }) => {\r\n              return {\r\n                login,\r\n                avatarUrl: avatar_url,\r\n                repos: data.map(({ description, full_name, html_url }) => ({\r\n                  description,\r\n                  repoName: full_name.split('/')[1],\r\n                  repoUrl: html_url,\r\n              }))\r\n              }\r\n            })\r\n          })\r\n        )\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          isLoading: false,\r\n          userInfo: data,\r\n        })\r\n        // store the key-response in cache\r\n        this.updateCache(lowerCaseKey, data)\r\n      })\r\n      .catch((e) => {\r\n        this.setState({ isLoading: false, hasError: true, userInfo: [] })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      inputValue, userInfo, isLoading, hasError,\r\n    } = this.state\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"main-header\">\r\n          <h1 className=\"main-header__title\"> Github Repository Search </h1>\r\n          <InputField\r\n            value={inputValue}\r\n            onInputChange={this.onInputChange}\r\n            onClickHandler={this.onClickHandler}\r\n          />\r\n        </div>\r\n        <div className=\"main-content\">\r\n          {isLoading && <div className=\"spinner\" />}\r\n          {hasError && <p>Sorry, something went wrong, please try again!</p>}\r\n          <RepoList userInfo={userInfo} />\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainContainer\r\n","import './App.css';\nimport MainContainer from './pages/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}